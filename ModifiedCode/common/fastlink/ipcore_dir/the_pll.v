////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2010 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 12.4
//  \   \         Application : xaw2verilog
//  /   /         Filename : the_pll.v
// /___/   /\     Timestamp : 02/06/2012 22:50:07
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: xaw2verilog -st /home/salomon/Mes_docs/fazia/step_1/VHDL/Franck_C1/en_cours/STEP_1_c/TEL/ipcore_dir/./the_pll.xaw /home/salomon/Mes_docs/fazia/step_1/VHDL/Franck_C1/en_cours/STEP_1_c/TEL/ipcore_dir/./the_pll
//Design Name: the_pll
//Device: xc5vlx85-2ff676
//
// Module the_pll
// Generated by Xilinx Architecture Wizard
// Written for synthesis tool: XST
// For block PLL_ADV_INST, Estimated PLL Jitter for CLKOUT0 = 0.228 ns
// For block PLL_ADV_INST, Estimated PLL Jitter for CLKOUT1 = 0.181 ns
// For block PLL_ADV_INST, Estimated PLL Jitter for CLKOUT2 = 0.162 ns
// For block PLL_ADV_INST, Estimated PLL Jitter for CLKOUT3 = 0.204 ns
`timescale 1ns / 1ps

module the_pll(CLKIN1_IN, 
               RST_IN, 
               CLKFBOUT_OUT, 
               CLKOUT0_OUT, 
               CLKOUT1_OUT, 
               CLKOUT2_OUT, 
               CLKOUT3_OUT, 
               LOCKED_OUT);

    input CLKIN1_IN;
    input RST_IN;
   output CLKFBOUT_OUT;
   output CLKOUT0_OUT;
   output CLKOUT1_OUT;
   output CLKOUT2_OUT;
   output CLKOUT3_OUT;
   output LOCKED_OUT;
   
   wire CLKFBIN_IN;
   wire CLKFBOUT_BUF;
   wire CLKOUT0_BUF;
   wire CLKOUT1_BUF;
   wire CLKOUT2_BUF;
   wire CLKOUT3_BUF;
   wire GND_BIT;
   wire [4:0] GND_BUS_5;
   wire [15:0] GND_BUS_16;
   wire VCC_BIT;
   
   assign GND_BIT = 0;
   assign GND_BUS_5 = 5'b00000;
   assign GND_BUS_16 = 16'b0000000000000000;
   assign VCC_BIT = 1;
   assign CLKFBOUT_OUT = CLKFBIN_IN;
   BUFG  CLKFBOUT_BUFG_INST (.I(CLKFBOUT_BUF), 
                            .O(CLKFBIN_IN));
   BUFG  CLKOUT0_BUFG_INST (.I(CLKOUT0_BUF), 
                           .O(CLKOUT0_OUT));
   BUFG  CLKOUT1_BUFG_INST (.I(CLKOUT1_BUF), 
                           .O(CLKOUT1_OUT));
   BUFG  CLKOUT2_BUFG_INST (.I(CLKOUT2_BUF), 
                           .O(CLKOUT2_OUT));
   BUFG  CLKOUT3_BUFG_INST (.I(CLKOUT3_BUF), 
                           .O(CLKOUT3_OUT));
   PLL_ADV #( .BANDWIDTH("OPTIMIZED"), .CLKIN1_PERIOD(40.000), 
         .CLKIN2_PERIOD(10.000), .CLKOUT0_DIVIDE(16), .CLKOUT1_DIVIDE(4), 
         .CLKOUT2_DIVIDE(2), .CLKOUT3_DIVIDE(8), .CLKOUT0_PHASE(0.000), 
         .CLKOUT1_PHASE(0.000), .CLKOUT2_PHASE(0.000), .CLKOUT3_PHASE(0.000), 
         .CLKOUT0_DUTY_CYCLE(0.500), .CLKOUT1_DUTY_CYCLE(0.500), 
         .CLKOUT2_DUTY_CYCLE(0.500), .CLKOUT3_DUTY_CYCLE(0.500), 
         .COMPENSATION("SOURCE_SYNCHRONOUS"), .DIVCLK_DIVIDE(1), 
         .CLKFBOUT_MULT(32), .CLKFBOUT_PHASE(0.0), .REF_JITTER(0.000000) ) 
         PLL_ADV_INST (.CLKFBIN(CLKFBIN_IN), 
                         .CLKINSEL(VCC_BIT), 
                         .CLKIN1(CLKIN1_IN), 
                         .CLKIN2(GND_BIT), 
                         .DADDR(GND_BUS_5[4:0]), 
                         .DCLK(GND_BIT), 
                         .DEN(GND_BIT), 
                         .DI(GND_BUS_16[15:0]), 
                         .DWE(GND_BIT), 
                         .REL(GND_BIT), 
                         .RST(RST_IN), 
                         .CLKFBDCM(), 
                         .CLKFBOUT(CLKFBOUT_BUF), 
                         .CLKOUTDCM0(), 
                         .CLKOUTDCM1(), 
                         .CLKOUTDCM2(), 
                         .CLKOUTDCM3(), 
                         .CLKOUTDCM4(), 
                         .CLKOUTDCM5(), 
                         .CLKOUT0(CLKOUT0_BUF), 
                         .CLKOUT1(CLKOUT1_BUF), 
                         .CLKOUT2(CLKOUT2_BUF), 
                         .CLKOUT3(CLKOUT3_BUF), 
                         .CLKOUT4(), 
                         .CLKOUT5(), 
                         .DO(), 
                         .DRDY(), 
                         .LOCKED(LOCKED_OUT));
endmodule
